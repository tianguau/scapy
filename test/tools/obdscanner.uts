% Regression tests for obdscanner
~ vcan_socket needs_root linux

+ Configuration
~ conf

= Imports
load_layer("can")
import six, subprocess, sys
from subprocess import call
from scapy.contrib.automotive.ecu import *

def eprint(*args, **kwargs):
    subprocess.call("printf \"%s\r\n\" > /dev/stderr" % args, shell=True, **kwargs)

= Definition of constants, utility functions and mock classes
iface0 = "vcan0"
iface1 = "vcan1"

# function to exit when the can-isotp kernel module is not available
ISOTP_KERNEL_MODULE_AVAILABLE = False
def exit_if_no_isotp_module():
    if not ISOTP_KERNEL_MODULE_AVAILABLE:
        eprint("TEST SKIPPED: can-isotp not available")
        warning("Can't test ISOTP native socket because kernel module is not loaded")
        exit(0)


= Initialize a virtual CAN interface
if 0 != call("cansend %s 000#" % iface0, shell=True):
    # vcan0 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface0, shell=True):
        print("add %s failed: Maybe it was already up?" % iface0)
    if 0 != call("sudo ip link set dev %s up" % iface0, shell=True):
        raise Exception("could not bring up %s" % iface0)

if 0 != call("cansend %s 000#" % iface0, shell=True):
    raise Exception("cansend doesn't work")

if 0 != call("cansend %s 000#" % iface1, shell=True):
    # vcan1 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface1, shell=True):
        print("add %s failed: Maybe it was already up?" % iface1)
    if 0 != call("sudo ip link set dev %s up" % iface1, shell=True):
        raise Exception("could not bring up %s" % iface1)

if 0 != call("cansend %s 000#" % iface1, shell=True):
    raise Exception("cansend doesn't work")

print("CAN should work now")


if six.PY3:
    from scapy.contrib.cansocket_native import *
else:
    from scapy.contrib.cansocket_python_can import *


if "python_can" in CANSocket.__module__:
    import can as python_can
    new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface, bitrate=250000))
    new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface0, bitrate=250000), timeout=0.01)
    new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface1, bitrate=250000), timeout=0.01)
    can_socket_string = "-i socketcan -c %s -b 250000" % iface0
else:
    new_can_socket = lambda iface: CANSocket(iface)
    new_can_socket0 = lambda: CANSocket(iface0)
    new_can_socket1 = lambda: CANSocket(iface1)
    can_socket_string = "-c %s" % iface0

# utility function for draining a can interface, asserting that no packets are there
def drain_bus(iface=iface0, assert_empty=True):
    with new_can_socket(iface) as s:
        pkts = s.sniff(timeout=0.1)
        if assert_empty:
            assert len(pkts) == 0

= Verify that a CAN socket can be created and closed
s = new_can_socket(iface0)
s.close()


= Check if can-isotp and can-utils are installed on this system
p = subprocess.Popen('lsmod | grep "^can_isotp"', stdout=subprocess.PIPE, shell=True)
if p.wait() == 0:
    if b"can_isotp" in p.stdout.read():
        p = subprocess.Popen("isotpsend -s1 -d0 %s" % iface0, stdin=subprocess.PIPE, shell=True)
        p.stdin.write(b"01")
        p.stdin.close()
        r = p.wait()
        if r == 0:
            ISOTP_KERNEL_MODULE_AVAILABLE = True


+ Syntax check

= Import isotp
conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': ISOTP_KERNEL_MODULE_AVAILABLE}
load_contrib("isotp")

if ISOTP_KERNEL_MODULE_AVAILABLE:
    from scapy.contrib.isotp import ISOTPNativeSocket
    ISOTPSocket = ISOTPNativeSocket
    assert ISOTPSocket == ISOTPNativeSocket
else:
    from scapy.contrib.isotp import ISOTPSoftSocket
    ISOTPSocket = ISOTPSoftSocket
    assert ISOTPSocket == ISOTPSoftSocket


+ Usage tests

= Test wrong usage
print(sys.executable)
result = subprocess.Popen("%s $PWD/scapy/tools/automotive/obdscanner.py" % sys.executable, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
returncode = result.wait()

std_out, std_err = result.communicate()
if returncode:
    print(std_out)
    print(std_err)

assert returncode != 0

expected_output = plain_str(b'usage:')
assert expected_output in plain_str(std_err)


= Test show help
result = subprocess.Popen("%s $PWD/scapy/tools/automotive/obdscanner.py --help" % sys.executable, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
if result.wait() == 0:
    std_out, std_err = result.communicate()
    assert std_err == None
    expected_output = plain_str(b'Scan for open ISOTP-Sockets.')
    print(std_out)
    assert expected_output in plain_str(std_out)


= Test wrong socket for Python2 or Windows
if six.PY2:
    version = subprocess.Popen("python --version", stdout=subprocess.PIPE, shell=True)
    if 0 == version.wait():
        print(version.communicate())
    result = subprocess.Popen("%s $PWD/scapy/tools/automotive/obdscanner.py -c vcan0 -s 0x600 -d 0x601 -b 250000" % sys.executable, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if result.wait() == 0:
        expected_output = plain_str(b'Wrong interface')
        std_out, std_err = result.communicate()
        assert std_err == None
        print(std_out)
        print(expected_output)
        assert expected_output in plain_str(std_out)

= Test Python2 call
if six.PY2:
    result = subprocess.Popen("%s $PWD/scapy/tools/automotive/obdscanner.py -i socketcan -c vcan0 -s 0x600 -d 0x601 -b 250000 -v" % sys.executable, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    returncode = result.wait()
    std_out, std_err = result.communicate()
    print(returncode)
    assert returncode == 0
    expected_output = plain_str(b'Starting OBD-Scan...')
    print(std_out)
    print(expected_output)
    assert expected_output in plain_str(std_out)

+ Scan tests

= Load contribution layer
load_contrib('automotive.obd.obd')

conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': ISOTP_KERNEL_MODULE_AVAILABLE}
load_contrib('isotp')

+ Simulate scanner

= Test DTC scan

drain_bus(iface0)

s3 = OBD()/OBD_S03_PR(dtcs=[OBD_DTC()])

example_responses = [ECUResponse(session=range(0,255), security_level=0, responses=s3)]

with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD)
    sim = threading.Thread(target=answering_machine, kwargs={'count': 3, 'timeout': 10})
    sim.start()
    try:
        result = subprocess.Popen("%s $PWD/scapy/tools/automotive/obdscanner.py %s -s 0x7e0 -d 0x7e8 -b 250000" % (
        sys.executable, can_socket_string), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

        std_out, std_err = result.communicate()
        if six.PY2:
            expected_output = b"Service 3:\nC\x01\x00\x00"
        else:
            expected_output = b"Service 3:\nb'C\\x01\\x00\\x00'"

        assert bytes_encode(expected_output) in bytes_encode(std_out)

    finally:
        sim.join(timeout=10)


= Test supported PIDs scan

drain_bus(iface0)

s1_pid00 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID00(supported_pids="PID03+PID0B+PID0F")])
s6_mid00 = OBD()/OBD_S06_PR(data_records=[OBD_S06_PR_Record()/OBD_MID00(supported_mids="")])
s8_tid00 = OBD()/OBD_S08_PR(data_records=[OBD_S08_PR_Record()/OBD_TID00(supported_tids="")])
s9_iid00 = OBD()/OBD_S09_PR(data_records=[OBD_S09_PR_Record()/OBD_IID00(supported_iids="")])

s1_pid03 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID03(fuel_system1=0, fuel_system2=2)])
s1_pid0B = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0B(data=100)])
s1_pid0F = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0F(data=50)])

# Create answers for 'supported PIDs scan'
example_responses = \
    [ECUResponse(session=range(0,255), security_level=0, responses=s3),
     ECUResponse(session=range(0,255), security_level=0, responses=s1_pid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s6_mid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s8_tid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s9_iid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid03),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid0B),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid0F)]



with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD)
    sim = threading.Thread(target=answering_machine, kwargs={'count': 10, 'timeout': 10})
    sim.start()
    try:
        result = subprocess.Popen("%s $PWD/scapy/tools/automotive/obdscanner.py %s -s 0x7e0 -d 0x7e8 -b 250000 -r" % (
        sys.executable, can_socket_string), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

        std_out, std_err = result.communicate()
        assert std_err == b''

        if six.PY2:
            expected_output = [b"Service 3:\nC\x01\x00\x00",
                               b"Service 1:\n{",
                               b"3: 'A\\x03\\x00\\x02'",
                               b"11: 'A\\x0bd'",
                               b"15: 'A\\x0fZ'"]
        else:
            expected_output = [b"Service 3:\nb'C\\x01\\x00\\x00'",
                               b"Service 1:\n{",
                               b"3: b'A\\x03\\x00\\x02'",
                               b"11: b'A\\x0bd'",
                               b"15: b'A\\x0fZ'"]

        for out in expected_output:
            assert bytes_encode(out) in bytes_encode(std_out)
    finally:
        sim.join(timeout=10)


= Test full scan

drain_bus(iface0)

# Add unsupported PID
s1_pid01 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID01()])
example_responses.append(ECUResponse(session=range(0,255), security_level=0, responses=s1_pid01))

with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD)
    sim = threading.Thread(target=answering_machine, kwargs={'count': 11, 'timeout': 10})
    sim.start()
    try:
        result = subprocess.Popen(
            "%s $PWD/scapy/tools/automotive/obdscanner.py %s -s 0x7e0 -d 0x7e8 -b 250000 -t 0.001 -ru" % (
            sys.executable, can_socket_string), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

        std_out, std_err = result.communicate()
        assert std_err == b''

        if six.PY2:
            expected_output = [b"Service 3:\nC\x01\x00\x00",
                               b"Service 1:\n{3: 'A\x03\x00\x02', 11: 'A\x0bd', 15: 'A\x0fZ'}",
                               b"Service 1:\n{1: 'A\x01\x00\x00\x00\x00'}"]
        else:
            expected_output = [b"Service 3:\nb'C\\x01\\x00\\x00'",
                               b"Service 1:\n{3: b'A\\x03\\x00\\x02', 11: b'A\\x0bd', 15: b'A\\x0fZ'}",
                               b"Service 1:\n{1: b'A\\x01\\x00\\x00\\x00\\x00'}"]

        if six.PY2:
            expected_output = [b"Service 3:\nC\x01\x00\x00",
                               b"Service 1:\n{",
                               b"3: 'A\\x03\\x00\\x02'",
                               b"11: 'A\\x0bd'",
                               b"15: 'A\\x0fZ'",
                               b"Service 1:\n{1: 'A\\x01\\x00\\x00\\x00\\x00'}"]
        else:
            expected_output = [b"Service 3:\nb'C\\x01\\x00\\x00'",
                               b"Service 1:\n{",
                               b"3: b'A\\x03\\x00\\x02'",
                               b"11: b'A\\x0bd'",
                               b"15: b'A\\x0fZ'",
                               b"Service 1:\n{1: b'A\\x01\\x00\\x00\\x00\\x00'}"]

        for out in expected_output:
            assert bytes_encode(out) in bytes_encode(std_out)

    finally:
        sim.join(timeout=10)


+ Cleanup

= Cleanup

if 0 != call("sudo ip link delete vcan0", shell=True):
        raise Exception("vcan0 could not be deleted")

if 0 != call("sudo ip link delete vcan1", shell=True):
        raise Exception("vcan1 could not be deleted")