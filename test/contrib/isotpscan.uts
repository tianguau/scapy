% Regression tests for ISOTPScan

+ Configuration
~ conf

= Imports
load_layer("can")
conf.contribs['CAN']['swap-bytes'] = False
import threading, six, subprocess
from subprocess import call
from scapy.contrib.isotp import send_multiple_ext, filter_periodic_packets, scan, scan_extended
from scapy.consts import LINUX

= Definition of constants, utility functions

iface0 = "vcan0"
iface1 = "vcan1"

# function to exit when the can-isotp kernel module is not available
ISOTP_KERNEL_MODULE_AVAILABLE = False
def exit_if_no_isotp_module():
    if not ISOTP_KERNEL_MODULE_AVAILABLE:
        err = "TEST SKIPPED: can-isotp not available"
        subprocess.call("printf \"%s\r\n\" > /dev/stderr" % err, shell=True)
        warning("Can't test ISOTP native socket because kernel module is not loaded")
        exit(0)


= Initialize a virtual CAN interface
~ vcan_socket needs_root linux
if 0 != call("cansend %s 000#" % iface0, shell=True):
    # vcan0 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface0, shell=True):
        print("add %s failed: Maybe it was already up?" % iface0)
    if 0 != call("sudo ip link set dev %s up" % iface0, shell=True):
        raise Exception("could not bring up %s" % iface0)

if 0 != call("cansend %s 000#" % iface0, shell=True):
    raise Exception("cansend doesn't work")

if 0 != call("cansend %s 000#" % iface1, shell=True):
    # vcan1 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface1, shell=True):
        print("add %s failed: Maybe it was already up?" % iface1)
    if 0 != call("sudo ip link set dev %s up" % iface1, shell=True):
        raise Exception("could not bring up %s" % iface1)

if 0 != call("cansend %s 000#" % iface1, shell=True):
    raise Exception("cansend doesn't work")

print("CAN should work now")

= Import CANSocket

from scapy.contrib.cansocket_python_can import *

import can as python_can
new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface))
new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface0), timeout=0.01)
new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface1), timeout=0.01)

# utility function for draining a can interface, asserting that no packets are there
def drain_bus(iface=iface0, assert_empty=True):
    with new_can_socket0() as s:
        pkts = s.sniff(timeout=0.1)
        if assert_empty:
            assert len(pkts) == 0

print("CAN sockets should work now")

= Overwrite definition for vcan_socket systems native sockets
~ vcan_socket needs_root linux

if six.PY3 and LINUX:
    from scapy.contrib.cansocket_native import *
    new_can_socket = lambda iface: CANSocket(iface)
    new_can_socket0 = lambda: CANSocket(iface0)
    new_can_socket1 = lambda: CANSocket(iface1)


= Overwrite definition for vcan_socket systems python-can sockets
~ vcan_socket needs_root linux
if "python_can" in CANSocket.__module__:
    new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface, bitrate=250000), timeout=0.01)
    new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface0, bitrate=250000), timeout=0.01)
    new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface1, bitrate=250000), timeout=0.01)

= Verify that a CAN socket can be created and closed
s = new_can_socket(iface0)
s.close()


= Check if can-isotp and can-utils are installed on this system
~ linux
p = subprocess.Popen('lsmod | grep "^can_isotp"', stdout = subprocess.PIPE, shell=True)
if p.wait() == 0:
    if b"can_isotp" in p.stdout.read():
        p = subprocess.Popen("isotpsend -s1 -d0 %s" % iface0, stdin = subprocess.PIPE, shell=True)
        p.stdin.write(b"01")
        p.stdin.close()
        r = p.wait()
        if r == 0:
            ISOTP_KERNEL_MODULE_AVAILABLE = True


+ Syntax check

= Import isotp
conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': ISOTP_KERNEL_MODULE_AVAILABLE}
load_contrib("isotp")

if ISOTP_KERNEL_MODULE_AVAILABLE:
    from scapy.contrib.isotp import ISOTPNativeSocket
    ISOTPSocket = ISOTPNativeSocket
    assert ISOTPSocket == ISOTPNativeSocket
else:
    from scapy.contrib.isotp import ISOTPSoftSocket
    ISOTPSocket = ISOTPSoftSocket
    assert ISOTPSocket == ISOTPSoftSocket

= Test send_multiple_ext()

pkt = ISOTPHeaderEA(identifier=0x100, extended_address=1)/ISOTP_FF(message_size=100, data=b'\x00\x00\x00\x00\x00')
number_of_packets = 100

def sender():
    with new_can_socket0() as sock1:
        send_multiple_ext(sock1, 0, pkt, number_of_packets)

thread = threading.Thread(target=sender)

with new_can_socket0() as sock:
    pkts = sock.sniff(timeout=4, count=number_of_packets, started_callback=thread.start)

thread.join(timeout=10)
assert len(pkts) == number_of_packets

= Test filter_periodic_packets() with periodic packets
pkt = CAN(identifier=0x200, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
received_packets = dict()
for i in range(40):
    temp_pkt = pkt.copy()
    temp_pkt.time = i / 1000
    received_packets[i] = (temp_pkt, temp_pkt.identifier)

filter_periodic_packets(received_packets)
assert len(received_packets) == 0


= Test filter_periodic_packets() with periodic packets and one outlier
outlier = CAN(identifier=300, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
outlier.time = 50 / 1000

pkt = CAN(identifier=0x200, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
received_packets = dict()
for i in range(40):
    temp_pkt = pkt.copy()
    temp_pkt.time = i / 1000
    received_packets[i] = (temp_pkt, temp_pkt.identifier)

received_packets[40] = (outlier, outlier.identifier)

filter_periodic_packets(received_packets)
assert len(received_packets) == 1


= Test filter_periodic_packets() with nonperiodic packets
pkt = CAN(identifier=0x200, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
received_packets = dict()
for i in range(40):
    temp_pkt = pkt.copy()
    temp_pkt.time = (i * i) / 1000
    received_packets[i] = (temp_pkt, temp_pkt.identifier)

filter_periodic_packets(received_packets)
assert len(received_packets) == 40

= Test scan()

drain_bus(iface0)

semaphore = threading.Semaphore(0)

def isotpserver(idx):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+idx, did=0x600+idx) as sock:
        sock.sniff(timeout=30 ,count=1, started_callback=semaphore.release)

listen_sockets = list()
for i in range(1, 4):
    listen_sockets.append(threading.Thread(target=isotpserver, args=(int(i*0x10),)))
    listen_sockets[-1].start()

for _ in range(len(listen_sockets)):
    semaphore.acquire()

with new_can_socket0() as scansock:
    found_packets = scan(scansock, range(0x5ff, 0x640), noise_ids=[0x710], sniff_time=0.05, verbose=True)

with new_can_socket0() as cans:
    for _ in range(5):
        cans.send(CAN(identifier=0x610, data=b'\x01\xaa'))
        cans.send(CAN(identifier=0x620, data=b'\x01\xaa'))
        cans.send(CAN(identifier=0x630, data=b'\x01\xaa'))
        time.sleep(0)

print(len(listen_sockets))

for thread in listen_sockets:
    thread.join(timeout=1)

print(len(found_packets))
assert len(found_packets) == 2


= Test scan_extended()

recvpacket = CAN(flags=0, identifier=0x700, length=4, data=b'\xaa0\x00\x00')

semaphore = threading.Semaphore(0)
drain_bus(iface0)

def isotpserver():
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700, did=0x601, extended_addr=0xaa, extended_rx_addr=0xbb) as s:
        s.sniff(timeout=100, count=1, started_callback=semaphore.release)

thread = threading.Thread(target=isotpserver)
thread.start()

semaphore.acquire()

with new_can_socket0() as scansock:
    found_packets = scan_extended(scansock, [0x601], sniff_time=0.05)

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x601, data=b'\xbb\x01\xaa'))
    thread.join(timeout=10)

fpkt = found_packets[list(found_packets.keys())[0]][0]
rpkt = recvpacket

assert fpkt.length == rpkt.length
assert fpkt.data == rpkt.data
assert fpkt.identifier == rpkt.identifier

= Test ISOTPScan(output_format=text)
done = False

semaphore = threading.Semaphore(0)

drain_bus(iface0)
def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+i, did=0x600+i) as isotpsock1:
        isotpsock1.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(p):
    global done
    with new_can_socket0() as sock:
        while not done:
            sock.send(p)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()

semaphore.acquire()
semaphore.acquire()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x5ff, 0x604+1), output_format="text", noise_listen_time=1, sniff_time=0.05)

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x601, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x602, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x603, data=b'\x01\xaa'))

thread1.join(timeout=10)
thread2.join(timeout=10)
done = True
thread_noise.join(timeout=10)

text = "\nFound 2 ISOTP-FlowControl Packet(s):"
assert text in result
assert "0x602" in result
assert "0x603" in result
assert "0x702" in result
assert "0x703" in result
assert "No Padding" in result

= Test ISOTPScan(output_format=text) extended_can_id
done = False

semaphore = threading.Semaphore(0)

drain_bus(iface0)
def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x1ffff700+i, did=0x1ffff600+i) as isotpsock1:
        isotpsock1.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    global done
    with new_can_socket0() as sock:
        while not done:
            sock.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x1ffff701, flags="extended", length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()
semaphore.acquire()
semaphore.acquire()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x1ffff5ff, 0x1ffff604+1), output_format="text", noise_listen_time=1, sniff_time=0.05, extended_can_id=True)

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x1ffff601, flags="extended", data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x1ffff602, flags="extended", data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x1ffff603, flags="extended", data=b'\x01\xaa'))

thread1.join(timeout=10)
thread2.join(timeout=10)
done = True
thread_noise.join(timeout=10)

print(result)
text = "\nFound 2 ISOTP-FlowControl Packet(s):"
assert text in result
assert "0x1ffff602" in result
assert "0x1ffff603" in result
assert "0x1ffff702" in result
assert "0x1ffff703" in result
assert "No Padding" in result


= Test ISOTPScan(output_format=code)
done = False

semaphore = threading.Semaphore(0)

drain_bus(iface0)
def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+i, did=0x600+i) as isotpsock1:
        isotpsock1.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    global done
    with new_can_socket0() as sock:
        while not done:
            sock.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()
semaphore.acquire()
semaphore.acquire()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x5ff, 0x604+1), output_format="code", noise_listen_time=1, sniff_time=0.05, can_interface="can0")

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x601, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x602, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x603, data=b'\x01\xaa'))

thread1.join(timeout=10)
thread2.join(timeout=10)
done = True
thread_noise.join(timeout=10)

s1 = "ISOTPSocket(can0, sid=0x602, did=0x702, padding=False, basecls=ISOTP)\n"
s2 = "ISOTPSocket(can0, sid=0x603, did=0x703, padding=False, basecls=ISOTP)\n"

print(result)
assert s1 in result
assert s2 in result


= Test extended ISOTPScan(output_format=code)
drain_bus(iface0)

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+i, did=0x600+i, extended_addr=0x11, extended_rx_addr=0x22) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()

semaphore.acquire()
semaphore.acquire()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x5ff, 0x604+1), extended_addressing=True, sniff_time=0.05, noise_listen_time=1, output_format="code", can_interface="can0")

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x602, data=b'\x22\x01\xaa'))
    cans.send(CAN(identifier=0x603, data=b'\x22\x01\xaa'))
    thread1.join(timeout=10)
    thread2.join(timeout=10)
    thread_noise.join(timeout=10)

s1 = "ISOTPSocket(can0, sid=0x602, did=0x702, padding=False, extended_addr=0x22, extended_rx_addr=0x11, basecls=ISOTP)"
s2 = "ISOTPSocket(can0, sid=0x603, did=0x703, padding=False, extended_addr=0x22, extended_rx_addr=0x11, basecls=ISOTP)"
print(result)
assert s1 in result
assert s2 in result

= Test extended ISOTPScan(output_format=code) extended_can_id
drain_bus(iface0)

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x1ffff700+i, did=0x1ffff600+i, extended_addr=0x11, extended_rx_addr=0x22) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x1ffff701, flags="extended", length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()

semaphore.acquire()
semaphore.acquire()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x1ffff5ff, 0x1ffff604+1), extended_can_id=True, extended_addressing=True, sniff_time=0.05, noise_listen_time=1, output_format="code", can_interface="can0")

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x1ffff602, flags="extended", data=b'\x22\x01\xaa'))
    cans.send(CAN(identifier=0x1ffff603, flags="extended", data=b'\x22\x01\xaa'))
    thread1.join(timeout=10)
    thread2.join(timeout=10)
    thread_noise.join(timeout=10)

s1 = "ISOTPSocket(can0, sid=0x1ffff602, did=0x1ffff702, padding=False, extended_addr=0x22, extended_rx_addr=0x11, basecls=ISOTP)"
s2 = "ISOTPSocket(can0, sid=0x1ffff603, did=0x1ffff703, padding=False, extended_addr=0x22, extended_rx_addr=0x11, basecls=ISOTP)"
print(result)
assert s1 in result
assert s2 in result


= Test ISOTPScan(output_format=None)
drain_bus(iface0)

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+i, did=0x600+i) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()

semaphore.acquire()
semaphore.acquire()

socks_interface = new_can_socket0()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x5ff, 0x604+1), can_interface=socks_interface, sniff_time=0.05, noise_listen_time=1)

result = sorted(result, key=lambda x:x.src)

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x601, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x602, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x603, data=b'\x01\xaa'))
    thread1.join(timeout=10)
    thread2.join(timeout=10)
    thread_noise.join(timeout=10)

assert len(result) == 2
assert 0x602 == result[0].src
assert 0x702 == result[0].dst
assert 0x603 == result[1].src
assert 0x703 == result[1].dst

with new_can_socket0() as cans:
    for s in result:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=0x702, data=b'\x01\xaa'))
        cans.send(CAN(identifier=0x703, data=b'\x01\xaa'))
        s.close()
        cans.send(CAN(identifier=0x702, data=b'\x01\xaa'))
        cans.send(CAN(identifier=0x703, data=b'\x01\xaa'))

socks_interface.close()
time.sleep(0.1)

for s in result:
    del s

= Test ISOTPScan(output_format=None) 2
drain_bus(iface0)

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+i, did=0x600+i) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=[9])
thread2 = threading.Thread(target=isotpserver, args=[8])
thread1.start()
thread2.start()

semaphore.acquire()
semaphore.acquire()

socks_interface = new_can_socket0()
with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x5ff, 0x6A0), can_interface=socks_interface, sniff_time=0.05, noise_listen_time=1)

result = sorted(result, key=lambda x:x.src)

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x609, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x608, data=b'\x01\xaa'))
    thread1.join(timeout=10)
    thread2.join(timeout=10)
    thread_noise.join(timeout=10)

assert len(result) == 2
assert 0x608 == result[0].src
assert 0x708 == result[0].dst
assert 0x609 == result[1].src
assert 0x709 == result[1].dst

with new_can_socket0() as cans:
    for s in result:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=0x709, data=b'\x01\xaa'))
        cans.send(CAN(identifier=0x708, data=b'\x01\xaa'))
        s.close()
        time.sleep(0)
        cans.send(CAN(identifier=0x709, data=b'\x01\xaa'))
        cans.send(CAN(identifier=0x708, data=b'\x01\xaa'))

socks_interface.close()
time.sleep(0.1)

for s in result:
    del s

= Test extended ISOTPScan(output_format=None)
drain_bus(iface0)

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x700+i, did=0x600+i, extended_addr=0x11, extended_rx_addr=0x22) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

thread1 = threading.Thread(target=isotpserver, args=(2,))
thread2 = threading.Thread(target=isotpserver, args=(3,))
thread1.start()
thread2.start()

semaphore.acquire()
semaphore.acquire()

socks_interface = new_can_socket0()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x5ff, 0x604+1), extended_addressing=True, can_interface=socks_interface, sniff_time=0.05, noise_listen_time=1)

result = sorted(result, key=lambda x:x.src)

with new_can_socket0() as cans:
    cans.send(CAN(identifier=0x602, data=b'\x01\xaa'))
    cans.send(CAN(identifier=0x603, data=b'\x01\xaa'))

thread1.join(timeout=10)
thread2.join(timeout=10)
thread_noise.join(timeout=10)

assert len(result) == 2
assert 0x602 == result[0].src
assert 0x702 == result[0].dst
assert 0x22 == result[0].exsrc
assert 0x11 == result[0].exdst
assert 0x603 == result[1].src
assert 0x703 == result[1].dst
assert 0x22 == result[1].exsrc
assert 0x11 == result[1].exdst

with new_can_socket0() as cans:
    for s in result:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=0x702, data=b'\x11\x01\xaa'))
        cans.send(CAN(identifier=0x703, data=b'\x11\x01\xaa'))
        s.close()
        time.sleep(0)
        cans.send(CAN(identifier=0x702, data=b'\x11\x01\xaa'))
        cans.send(CAN(identifier=0x703, data=b'\x11\x01\xaa'))

socks_interface.close()
time.sleep(0.1)

for s in result:
    del s

= Test ISOTPScan(output_format=None) random IDs
drain_bus(iface0)

rnd = RandNum(0x1, 0x100)

ids = set(rnd._fix() for _ in range(10))
print(ids)

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x100+i, did=i) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt,))
thread_noise.start()

threads = [threading.Thread(target=isotpserver, args=(x,)) for x in ids]
_ = [t.start() for t in threads]

for _ in range(len(threads)):
    semaphore.acquire()

socks_interface = new_can_socket0()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x000, 0x101), can_interface=socks_interface, noise_listen_time=1, sniff_time=0.05, verbose=True)
    result = sorted(result, key=lambda x:x.src)

with new_can_socket0() as cans:
    for i in ids:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=i, data=b'\x01\xaa'))
    _ = [t.join(timeout=10) for t in threads]
    thread_noise.join(timeout=10)

assert len(result) == len(ids)
ids = sorted(ids)
for i, s in zip(ids, result):
    assert i == s.src
    assert i+0x100 == s.dst

with new_can_socket0() as cans:
    for s in result:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=s.dst, data=b'\x01\xaa'))
        cans.send(CAN(identifier=s.src, data=b'\x01\xaa'))
        s.close()
        time.sleep(0)
        cans.send(CAN(identifier=s.dst, data=b'\x01\xaa'))
        cans.send(CAN(identifier=s.src, data=b'\x01\xaa'))

socks_interface.close()
time.sleep(0.1)
for s in result:
    del s


= Test ISOTPScan(output_format=None) random IDs padding
drain_bus(iface0)

rnd = RandNum(0x1, 0x100)

ids = set(rnd._fix() for _ in range(10))

semaphore = threading.Semaphore(0)

def isotpserver(i):
    with new_can_socket0() as isocan, ISOTPSocket(isocan, sid=0x100+i, did=i, padding=True) as s:
        s.sniff(timeout=100 ,count=1, started_callback=semaphore.release)

def make_noise(pkt):
    with new_can_socket0() as s:
        for _ in range(20):
            s.send(pkt)
            time.sleep(0.1)

pkt = CAN(identifier=0x701, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
thread_noise = threading.Thread(target=make_noise, args=(pkt, ))
thread_noise.start()

threads = [threading.Thread(target=isotpserver, args=(x,)) for x in ids]
_ = [t.start() for t in threads]

for _ in range(len(threads)):
    semaphore.acquire()

socks_interface = new_can_socket0()

with new_can_socket0() as scansock:
    result = ISOTPScan(scansock, range(0x000, 0x101), can_interface=socks_interface, noise_listen_time=1, sniff_time=0.05, verbose=True)
    result = sorted(result, key=lambda x:x.src)

with new_can_socket0() as cans:
    for i in ids:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=i, data=b'\x01\xaa'))

_ = [t.join(timeout=10) for t in threads]
thread_noise.join(timeout=10)

assert len(result) == len(ids)
ids = sorted(ids)
for i, s in zip(ids, result):
    assert i == s.src
    assert i+0x100 == s.dst
    if isinstance(s, ISOTPSoftSocket):
        assert s.impl.padding == True

with new_can_socket0() as cans:
    for s in result:
        # This helps to close ISOTPSoftSockets
        cans.send(CAN(identifier=s.dst, data=b'\x01\xaa'))
        cans.send(CAN(identifier=s.src, data=b'\x01\xaa'))
        s.close()
        cans.send(CAN(identifier=s.dst, data=b'\x01\xaa'))
        cans.send(CAN(identifier=s.src, data=b'\x01\xaa'))

socks_interface.close()
time.sleep(0.1)

for s in result:
    del s

= Delete vcan interfaces
~ vcan_socket needs_root linux

if 0 != call("sudo ip link delete %s" % iface0, shell=True):
        raise Exception("%s could not be deleted" % iface0)

if 0 != call("sudo ip link delete %s" % iface1, shell=True):
        raise Exception("%s could not be deleted" % iface1)
